# This is the path for the KnittingBoar JAR
iterativereduce.jar.path=iterativereduce-0.1-SNAPSHOT.jar

# Path to your application (which was compiled against KB!)
app.jar.path=KnittingBoar-1.0-SNAPSHOT-jar-with-dependencies.jar

# Comma separated list of other JAR's required for depenedencies
app.lib.jar.path=avro-1.7.1.jar,avro-ipc-1.7.1.jar

# Input file(s) to process
app.input.path=src/test/resources/data/xor/threeworkers/

# Output results to
app.output.path=file:///tmp/xor.model

# Number of iterations
app.iteration.count=20000

app.name=IR_NN_Broski

# Requested memory for YARN clients
yarn.memory=512
# The main() class/entry for the AppMaster
yarn.master.main=tv.floe.metronome.classification.neuralnetworks.iterativereduce.MasterNode
# Any extra command-line args
yarn.master.args=

# The main() class/entry for the AppWorker
yarn.worker.main=tv.floe.metronome.classification.neuralnetworks.iterativereduce.WorkerNode

# Any extra command-line args
yarn.worker.args=

# Any other configuration params, will be pushed down to clients
tv.floe.metronome.neuralnetwork.conf.RecordFactoryClassname=com.cloudera.knittingboar.records.fix.this

tv.floe.metronome.neuralnetwork.conf.LayerNeuronCounts=2,3,1


tv.floe.metronome.neuralnetwork.conf.LearningRate=0.1

# we can get away w no input schema for libsvmformat because its inferred from the nn layers
#tv.floe.metronome.neuralnetwork.conf.InputRecordSchema=i:4 | o:3
	      
tv.floe.metronome.neuralnetwork.conf.TrainingErrorThreshold=0.2
